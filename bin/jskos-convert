#!/usr/bin/env node

const fs = require("fs")
const request = require("request")
const program = require("../lib/cli")
const convert = require("../lib/jskos-convert")
const { guessObjectType } = require("jskos-tools")

program
  .usage("[options] [type] [files...]")
  .option("-f, --from <format>","input format (ndjson or csv)")
  .option("-t, --to <format>","output format (ndjson or csv)")
  .option("-v, --validate","validate and omit invalid records")
  .option("-l, --language <lang>", "include labels (use '-' for any language)")
  .option("-r, --registry <file>", "registry file with schemes, types... to look up")
  .option("-s, --scheme <uri|notation>", "which scheme to use when converting concepts")
  .option("-m, --marktop", "explicitly mark concepts without broader as top concepts")
  .example("mappings -t csv mappings.ndjson")
  .example("concepts -r registry.json -s example http://example.org/jskos.csv")

program
  .action( () => {
    const env = program
    let args = env.args || []

    if (args.length > 1) {
      args.pop()
    } else {
      program.help()
    }

    let type = (guessObjectType(args[0], true) || "").toLowerCase()
    if (type) {
      args.shift()
    } else {
      type = "concept"
    }

    const to = env.to || "ndjson"
    const { language, validate, scheme, marktop } = env
    const registry = {}
    if (env.registry) {
      let json = fs.readFileSync(env.registry)
      Object.assign(registry, JSON.parse(json))
    }
    const output = process.stdout

    output.on("error", err => {
      if (err.code == "EPIPE") {
        process.exit(0)
      }
    })

    if (!args.length) {
      args = ["-"]
    }

    while (args.length > 0) {
      let file = args.shift()
      let input = process.stdin
      let from = env.from

      if (file.match(/https?:\/\//)) {
        input = request.get(file)
      } else if (file !== "-") {
        input = fs.createReadStream(file)
      }

      let ext = file.match(/\.(csv|ndjson)$/)
      if (!from && ext) {
        from = ext[1]
      }

      from = from || "ndjson"
      input.on("error", e => { console.error(`${file}: ${e.message}`) })
      try {
        convert({ from, to, type, language, input, output, validate, registry, scheme, marktop })
      } catch(e) {
        console.error(e.message)
      }
    }
  })

program.parse(process.argv)
