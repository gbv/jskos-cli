#!/usr/bin/env node

const fs = require("fs")
const program = require("../lib/cli")
const { guessObjectType } = require("jskos-tools")
const jskosValidate = require("jskos-validate")
const readline = require("readline")

program
  .usage("[options] [type] files...")
  .option("-v, --verbose", "show error messages")
  .option("-u, --unknown", "allow unknown fields")
  .example("concepts concepts.ndjson")
  .example("mappings mappings.ndjson")
  .example("--list-types")
  .action( () => {
    const env = program
    args = (env.args || []).filter(a => typeof a === "string")

    if (!args.length) {
      program.help()
    }
    
    let type = (guessObjectType(args[0], true) || "").toLowerCase()
    if (type in jskosValidate) {
      type = args.shift().replace(/s$/,"")
    } else if (!fs.existsSync(args[0])) {
      console.error(`unknown object type: ${args[0]}`)
      process.exit(1)
    } else {
      type = "item"
    }

    const unknownFields = !!env.unknown
    const validate = (type, data) => {
      const validator = jskosValidate[type]
      const result = validator(data, { unknownFields })
      if (!result && env.verbose) {
        validator.errorMessages.map(error => console.error(`${type} ${error}`))
      }
      return result
    }

    let fail = 0
    if (args.length && args[0] !== "-") { // validate files
      args.forEach( (file, i) => {
        let json = fs.readFileSync(file).toString()
        let data = file.match(/\.ndjson$/)
          ? json.split(/\n/).filter(Boolean).map(JSON.parse) 
          : JSON.parse(json)
        let objects = Array.isArray(data) ? data : [data]
        let ok = objects.every(obj => validate(type, obj))

        let msg = process.stdout.isTTY
          ? `${ok ? "\x1b[32mok    " : "\x1b[31mnot ok"} ${i+1} - ${file}\x1b[0m`
          : `${ok ? "ok    " : "not ok"} ${i+1} - ${file}`
        console.log(msg)
        if (fail < 99 && !ok) fail++
      })
      process.exit(fail)
    } else { // validate NDJSON from STDIN
      let line = 1
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
      })
      rl.on("line", data => {
        let obj = JSON.parse(data)
        let ok = validate(type, obj)
        if (!ok) {
          if (fail < 99) fail++
          console.error(`invalid ${type} on line ${line}`)
        }
        line++
      })
      rl.on("close", () => process.exit(fail) )
    }
  })

program.parse(process.argv)
