#!/usr/bin/env node

const fs = require("fs")
const program = require("../lib/cli")
const { validate, guessObjectType } = require("jskos-tools")

program
  .usage("[options] [type] files...")
  .example("mappings mappings.ndjson")
  .action( () => {
    const env = program
    args = (env.args || []).filter(a => typeof a === "string")

    if (!args.length) {
      program.help()
    }

    let type = (guessObjectType(args[0]) || "").toLowerCase().replace(/^concept(.+)/, "$1")
    if (type in validate) {
      type = args.shift().replace(/s$/,"")
    } else if (!fs.existsSync(args[0])) {
      console.error(`unknown object type: ${args[0]}`)
      process.exit(1)
    } else {
      type = "item"
    }

    let fail = 0
    args.forEach( (file, i) => {
      let json = fs.readFileSync(file).toString()
      let data = file.match(/\.ndjson$/)
        ? json.split(/\n/).filter(Boolean).map(JSON.parse) 
        : JSON.parse(json)
      let objects = Array.isArray(data) ? data : [data]
      let ok = objects.every(obj => validate[type](obj))

      let msg = process.stdout.isTTY
        ? `${ok ? "\x1b[32mok    " : "\x1b[31mnot ok"} ${i+1} - ${file}\x1b[0m`
        : `${ok ? "ok    " : "not ok"} ${i+1} - ${file}`
      console.log(msg)
      if (fail < 99 && !ok) fail++
    })

    process.exit(fail)
  })

program.parse(process.argv)
